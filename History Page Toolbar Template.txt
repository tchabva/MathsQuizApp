Sure, I can write some code in Android compose that would create a screen with a toolbar that has two icons that can be selected to open dropdown lists and when any or both of the icons are not in their default state, a third icon that can clear them both to default appears. Here is one possible solution:

```kotlin
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@Composable
fun ToolbarScreen() {
    // State variables for the dropdown menus and their selected items
    var firstDropdownExpanded by remember { mutableStateOf(false) }
    var secondDropdownExpanded by remember { mutableStateOf(false) }
    var firstSelectedItem by remember { mutableStateOf("Item 1") }
    var secondSelectedItem by remember { mutableStateOf("Item A") }

    // A list of items for each dropdown menu
    val firstDropdownItems = listOf("Item 1", "Item 2", "Item 3")
    val secondDropdownItems = listOf("Item A", "Item B", "Item C")

    // A function to check if any icon is not in its default state
    fun isAnyIconChanged(): Boolean {
        return firstSelectedItem != "Item 1" || secondSelectedItem != "Item A"
    }

    // A function to reset both icons to their default state
    fun resetIcons() {
        firstSelectedItem = "Item 1"
        secondSelectedItem = "Item A"
        firstDropdownExpanded = false
        secondDropdownExpanded = false
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = "Toolbar Screen") },
                actions = {
                    Row(
                        modifier = Modifier.padding(horizontal = 16.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        // The first icon with a dropdown menu
                        Box(modifier = Modifier.wrapContentSize()) {
                            IconButton(onClick = { firstDropdownExpanded =
                                !firstDropdownExpanded }) {
                                Icon(imageVector =
                                    Icons.Filled.FilterList,
                                    contentDescription =
                                    null)
                            }
                            DropdownMenu(
                                expanded =
                                firstDropdownExpanded,
                                onDismissRequest =
                                { firstDropdownExpanded =
                                    false }) {
                                firstDropdownItems.forEach { item ->
                                    DropdownMenuItem(onClick =
                                    {
                                        firstSelectedItem =
                                            item;firstDropdownExpanded =
                                        false }) {
                                        Text(text =
                                            item)
                                    }
                                }
                            }
                        }

                        // The second icon with a dropdown menu
                        Box(modifier = Modifier.wrapContentSize()) {
                            IconButton(onClick =
                            { secondDropdownExpanded =
                                !secondDropdownExpanded }) {
                                Icon(imageVector =
                                    Icons.Filled.MoreVert,
                                    contentDescription =
                                    null)
                            }
                            DropdownMenu(
                                expanded =
                                secondDropdownExpanded,
                                onDismissRequest =
                                { secondDropdownExpanded =
                                    false }) {
                                secondDropdownItems.forEach { item ->
                                    DropdownMenuItem(onClick =
                                    {
                                        secondSelectedItem =
                                            item;secondDropdownExpanded=
                                        false }) {
                                        Text(text=
                                            item)
                                    }
                                }
                            }
                        }

                        // The third icon that clears both icons if they are not in default state
                        if (isAnyIconChanged()) {
                            IconButton(onClick=resetIcons) {
                                Icon(imageVector=
                                    Icons.Filled.ClearAll,
                                    contentDescription=null)
                            }
                        }
                    }
                })
        },
        content={
            Column(modifier=Modifier.fillMaxSize(),
                verticalArrangement=Arrangement.Center,
                horizontalAlignment=Alignment.CenterHorizontally) {

                // Display the selected items from each dropdown menu for testing purposes

                Text(text="First selected item: $firstSelectedItem")
                Text(text="Second selected item: $secondSelectedItem")
            }})
}

@Preview(showBackground=true)
@Composable
fun DefaultPreview() {

// Call the composable function here

ToolbarScreen()
}
```

Source: Conversation with Bing, 28/02/2023(1) Jetpack compose — DropdownMenu — Weather UI | Mahendran. https://mahendranv.github.io/posts/compose-dropdown/ Accessed 28/02/2023.
(2) AndroidPoet/Dropdown - GitHub. https://github.com/AndroidPoet/Dropdown Accessed 28/02/2023.
(3) How to Add a Dropdown Menu in Android Studio - Code Envato Tuts+. https://code.tutsplus.com/tutorials/how-to-add-a-dropdown-menu-in-android-studio--cms-37860 Accessed 28/02/2023.
(4) Exposed drop-down menu for jetpack compose - Stack Overflow. https://stackoverflow.com/questions/67111020/exposed-drop-down-menu-for-jetpack-compose Accessed 28/02/2023.
(5) Drop-Down Menu in Android using Jetpack Compose. https://www.geeksforgeeks.org/drop-down-menu-in-android-using-jetpack-compose/ Accessed 28/02/2023.
(6) Exploring Jetpack Compose: TopAppBar | by Joe Birch - Medium. https://medium.com/google-developer-experts/exploring-jetpack-compose-topappbar-c8b79893be34 Accessed 28/02/2023.